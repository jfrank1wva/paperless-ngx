# Generated by Django 4.1.11 on 2023-09-16 22:51

import logging

from django.db import migrations
from django.db import models
from django.db import transaction

from documents.data_models import DocumentSource

logger = logging.getLogger(__name__)


def convert_mail_rules_to_consumption_templates(apps, schema_editor):
    mail_rule_model = apps.get_model("paperless_mail", "MailRule")
    consumption_template_model = apps.get_model("documents", "ConsumptionTemplate")

    try:
        with transaction.atomic():
            for index, mailrule in enumerate(
                mail_rule_model.objects.all().order_by("order"),
            ):
                consumption_template = consumption_template_model.objects.create(
                    name=f"{mailrule.name} (migrated)",
                    order=index,
                    sources=[int(DocumentSource.MailFetch)],
                    filter_filename=mailrule.filter_attachment_filename,
                    assign_correspondent=mailrule.assign_correspondent,
                    assign_document_type=mailrule.assign_document_type,
                    assign_owner=mailrule.owner,
                    owner=mailrule.owner,
                )
                consumption_template.assign_tags.set(
                    [tag.pk for tag in mailrule.assign_tags.all()],
                )
                consumption_template.save()
                mailrule.consumption_templates.add(consumption_template)
    except Exception as e:
        logger.error(f"Error migration mail rules: {e}")
        raise e


class Migration(migrations.Migration):
    dependencies = [
        ("documents", "1039_consumptiontemplate"),
        ("paperless_mail", "0021_alter_mailaccount_password"),
    ]

    operations = [
        migrations.AddField(
            model_name="mailrule",
            name="consumption_templates",
            field=models.ManyToManyField(
                blank=True,
                related_name="+",
                to="documents.consumptiontemplate",
                verbose_name="Consumption template(s)",
            ),
        ),
        migrations.RunPython(convert_mail_rules_to_consumption_templates),
        migrations.RemoveField(
            model_name="mailrule",
            name="assign_correspondent",
        ),
        migrations.RemoveField(
            model_name="mailrule",
            name="assign_document_type",
        ),
        migrations.RemoveField(
            model_name="mailrule",
            name="assign_tags",
        ),
        migrations.RemoveField(
            model_name="mailrule",
            name="filter_attachment_filename",
        ),
        migrations.AlterField(
            model_name="mailrule",
            name="assign_correspondent_from",
            field=models.PositiveIntegerField(
                choices=[
                    (1, "Do not assign a correspondent"),
                    (2, "Use mail address"),
                    (3, "Use name (or mail address if not available)"),
                    (4, "Use correspondent from consumption template"),
                ],
                default=1,
                verbose_name="assign correspondent from",
            ),
        ),
    ]
